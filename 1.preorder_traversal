recursive traversal

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> ll=new ArrayList<>();
        if(root==null){
            return ll;
        }
        f(root,ll);
        return ll;
    }
    public void f(TreeNode root,List<Integer> ll){
        if(root==null){
            return;
        }
        ll.add(root.val);
        f(root.left,ll);
        f(root.right,ll);
    }
}
tc-->O(N);
sc-->O(N);
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
iterative solution-->

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        
        List<Integer> ans=new ArrayList<>();
        if(root==null){
            return ans;
        }
        Stack<TreeNode> st=new Stack<>();
        st.push(root);
        while(!st.isEmpty()){
            TreeNode node=st.pop();
            ans.add(node.val);
            if(node.right!=null){
                st.push(node.right);
            }
             if(node.left!=null){
                st.push(node.left);
            }
        }
        return ans;
    }
}

TC: O(n)
ðŸ”¹ Stack Space = O(h), where h is the height of the tree
ðŸ”¹ Output List = O(n)

âœ… SC: O(n) overall
