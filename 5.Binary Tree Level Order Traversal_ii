class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
         List<List<Integer>> ans=new ArrayList<>();
        if(root==null){
            return ans;
        }
        Queue<TreeNode> q=new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            int len=q.size();
            List<Integer> ll=new ArrayList<>();
            for(int i=0;i<len;i++){
                TreeNode node=q.poll();
                ll.add(node.val);
                if(node.left!=null){
                    q.add(node.left);
                }
                if(node.right!=null){
                    q.add(node.right);
                }
            }
            ans.add(0,ll);
        }
        return ans;

    }
}

Approach	Time Complexity	Space Complexity
ans.add(0, ll)	O(N + H²) worst	O(N)

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
         List<List<Integer>> ans=new ArrayList<>();
        if(root==null){
            return ans;
        }
        Queue<TreeNode> q=new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            int len=q.size();
            List<Integer> ll=new ArrayList<>();
            for(int i=0;i<len;i++){
                TreeNode node=q.poll();
                ll.add(node.val);
                if(node.left!=null){
                    q.add(node.left);
                }
                if(node.right!=null){
                    q.add(node.right);
                }
            }
            ans.add(ll);
        }
        Collections.reverse(ans);
        return ans;

    }
}

Approach	Time Complexity	Space Complexity
ans.add(ll) + reverse(ans)	✅ O(N + H)	O(N)
