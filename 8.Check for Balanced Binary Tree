class Solution {
    public boolean isBalanced(TreeNode root) {
        if(root==null){
            return true;
        }
        return f(root);
    }
    public boolean f(TreeNode root){
        if(root==null){
            return true;
        }
        int lh=h(root.left);
        int rh=h(root.right);
        if(Math.abs(lh-rh)>1){
            return false;
        }
        boolean lb=f(root.left);
        boolean rb=f(root.right);
        return lb&&rb;

    }

    public int h(TreeNode root){
        if(root==null){
            return 0;
        }
        int lh=h(root.left);
        int rh=h(root.right);
        return 1+Math.max(lh,rh);
    }

    
}
tc-->o(n);
sc-->o(n);

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

class Solution {
    public boolean isBalanced(TreeNode root) {
        return checkHeight(root) != -1;
    }

    private int checkHeight(TreeNode root) {
        if (root == null) return 0;

        int left = checkHeight(root.left);
        if (left == -1) return -1;

        int right = checkHeight(root.right);
        if (right == -1) return -1;

        if (Math.abs(left - right) > 1) return -1;

        return Math.max(left, right) + 1;
    }
}
tc-->o(n);
sc-->o(n);
